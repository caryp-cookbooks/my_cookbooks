#!/usr/bin/ruby
#
# Copyright (c) 2007 RightScale, Inc, All Rights Reserved Worldwide.
#

# Contacts and configures an HAProxy server for user with a generic apache application
# APP_SERVER_PORT -- port that the application is listening on from the back end
# LB_APPLISTENER_NAME -- specifies which HAProxy server pool to use
# LB_BACKEND_NAME -- A unique name for each back end e.g. (AMI_INSTANCE_ID)
# MAX_CONN_PER_SERVER -- Maximum number of connections per server
# HEALTH_CHECK_URI -- 

require 'yaml'
require 'resolv'

#Temporary, require. These will be automatically passed in soon.
#require '/var/spool/ec2/meta-data.rb'
os_info=`lsb_release -a`.downcase + `uname`.downcase
if os_info =~ /ubuntu/
  ENV['RS_DISTRO']="ubuntu"
  apache="apache"
  ubuntu = true
  centos = false
elsif os_info =~ /centos/
  ENV['RS_DISTRO']="centos"
  apache="httpd"
  centos = true
  ubuntu = false
end

#Escape the 4 problematic shell characters: ", $, `, and \ to get through the ssh command correctly
def shell_escape(string)
  return string.gsub(/\\/,"\\\\\\").gsub(/\"/,"\\\"").gsub(/\$/,"\\\$").gsub(/\`/,"\\\\\`")
end

# Connect server machine to load balancer to start receiving traffic
applistener  = ENV['LB_APPLISTENER_NAME']
backend_name = ENV['LB_BACKEND_NAME']

## Find port
#if ENV['OPT_VHOST_PORT']
  port = ENV['OPT_VHOST_PORT']
#else 
#  `netstat -lntp | grep -i #{apache}`.scan(/:(\d+)/) do |p|
#    next if p.include?("443")
#    result = `curl -sX TRACE http://$(cat /var/spool/ec2/meta-data/public-hostname):#{p}`
#    if result.include?("TRACE") && !result.include?("Forwarded")
#      port = p
#      break
#    end
#  end
#end
if port.nil? || port.empty?
  puts "ERROR: cannot find a suitable port that serves application on this machine..."
  puts "Please: (1)specify OPT_VHOST_PORT, (2)make sure you have an application vhost ready"
  exit(-1)
else
  puts "Using port: #{port}"
end

# Internal IP
this_backend = ENV['EC2_LOCAL_IPV4']

# Use cookies?
sess_sticky = "#{ENV['OPT_SESSION_STICKINESS']}".downcase
if(sess_sticky && sess_sticky.match(/^(true|yes|on)$/))
  cookie_options = "-c #{ENV['EC2_INSTANCE_ID']}"
end

# How many conns do we tell the LB to bring to the AJP port?
max_conn_per_svr = ENV['MAX_CONN_PER_SERVER']

puts ">>>>>>>Attaching app to host #{this_backend} <<<<<<<<<<<<<<"

# Using the default config file...no cookie persistence...and health checks
# /opt/rightscale/lb/bin/haproxy_config_server.rb  -a add -w -l $LB_APPLISTENER -s
# $LB_BACKEND_NAME -t $BACKEND_TARGET -k on -e "inter 3000 rise 2 fall 3 maxconn 3"
sshcmd = "ssh -o StrictHostKeyChecking=no -o PasswordAuthentication=no root@#{this_backend}"
cfg_cmd="/opt/rightscale/lb/bin/haproxy_config_server.rb"

target="#{this_backend}:#{port}"
#args= "-a add -w -l \"#{applistener}\" -s \"#{backend_name}\" -t \"#{target}\" #{cookie_options} "
args= "-a add -w -l \"#{applistener}\" -s \"#{backend_name}\" -t \"#{target}\" #{cookie_options} -e \" inter 3000 rise 2 fall 3 maxconn #{max_conn_per_svr}\" "
args += " -k on " if ENV['HEALTH_CHECK_URI'] != nil && ENV['HEALTH_CHECK_URI'] != ""
#args += " -f /etc/haproxy/rightscale_lb.cfg " if ubuntu
#puts "#{sshcmd} #{cfg_cmd} #{shell_escape(args)}"
res=`#{sshcmd} #{cfg_cmd} #{shell_escape(args)}`
puts res #for debugging...
    
unless $?.success? 
  puts "Error performing action: #{res}"
  exit(-1)
end
    
res = `#{sshcmd} service haproxy restart`

if res =~ /fail/
  puts "Error restarting service: #{res}"
  exit(-1)
else
  puts "#{res}\nService restarted successfully."
end

