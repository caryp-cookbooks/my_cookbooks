#!/usr/bin/ruby
#
# Copyright (c) 2007 RightScale, Inc, All Rights Reserved Worldwide.
#

# RightScript that contacts and configures the predefined load balancer instance 
# to stop forwarding traffic to all existing application servers configured in all
# lb instances associated with LB_HOSTNAME.

require 'yaml'
require 'resolv'

#Temporary, require. These will be automatically passed in soon.
#require '/var/spool/ec2/meta-data.rb'
os_info=`lsb_release -a`.downcase + `uname`.downcase
if os_info =~ /ubuntu/
  ENV['RS_DISTRO']="ubuntu"
  apache="apache"
  ubuntu = true
  centos = false
elsif os_info =~ /centos/
  ENV['RS_DISTRO']="centos"
  apache="httpd"
  centos = true
  ubuntu = false
end


#Escape the 4 problematic shell characters: ", $, `, and \ to get through the ssh command correctly
def shell_escape(string)
  return string.gsub(/\\/,"\\\\\\").gsub(/\"/,"\\\"").gsub(/\$/,"\\\$").gsub(/\`/,"\\\\\`")
end

# Connect server machine to load balancer to start receiving traffic
applistener=ENV['LB_APPLISTENER_NAME']
backend_name=ENV['LB_BACKEND_NAME']
lb_host=ENV['LB_HOSTNAME']

# Find port
#if ENV['OPT_VHOST_PORT']
  port = ENV['OPT_VHOST_PORT']
#else
#  `netstat -lntp | grep -i #{apache}`.scan(/:(\d+)/) do |p|
#    next if p.include?("443")
#    result = `curl -sX TRACE http://$(cat /var/spool/ec2/meta-data/public-hostname):#{p}`
#    if result.include?("TRACE") && !result.include?("Forwarded")
#      port = p
#      break
#    end
#  end
#end
if port.nil? || port.empty?
  puts "ERROR: cannot find a suitable port that serves application on this machine..."
  puts "Please: (1)specify OPT_VHOST_PORT, (2)make sure you have an application vhost ready"
  exit(-1)
else
  puts "Using port: #{port}"
end

#get internal IP
this_backend =ENV['EC2_LOCAL_IPV4']


# Connect the apps to all running instances of the lb host
addrs = Resolv.getaddresses(lb_host)
puts "Found  #{addrs.length} addresses for host #{lb_host}"
exit(-1) if addrs.length == 0 

successful=0
addrs.each do |addr| 
  puts ">>>>>>>Detaching application servers from host #{addr} <<<<<<<<<<<<<<"

  # Using the default config file...no cookie persistence...and health checks
  #/opt/rightscale/lb/bin/haproxy_config_server.rb  -a del -w -l $LB_APPLISTENER -s $LB_BACKEND_NAME -t $BACKEND_TARGET"
  sshcmd = "ssh -o StrictHostKeyChecking=no -o PasswordAuthentication=no root@#{addr}"
  cfg_cmd="/opt/rightscale/lb/bin/haproxy_config_server.rb"

    target="#{this_backend}:#{port}"
    args= "-a del -w -l \"#{applistener}\" -s \"#{backend_name}\" -t \"#{target}\" "
 
    #puts "#{sshcmd} #{cfg_cmd} #{shell_escape(args)}"
    res=`#{sshcmd} #{cfg_cmd} #{shell_escape(args)}`
    puts res #for debugging...
    
    if $? != 0
      puts "Error performing action"
      next
    end

  #check to see what OS the loadbalancer is running 
  host_os_info = `#{sshcmd} lsb_release -a`.downcase + `#{sshcmd} uname`.downcase
  if host_os_info =~ /ubuntu/
    host_os="ubuntu"
  elsif host_os_info =~ /centos/
    host_os="centos"
  end

  res = `#{sshcmd} service haproxy restart`

  if res =~ /fail/
    puts "Error restarting service: #{res}"
    next
  else
    successful += 1
    puts "#{res}\nService restarted successfully."
  end

end

if( successful != addrs.length )
  puts "WARNING, only #{successful} out of #{addrs.length} lb hosts could be disconnected"
  exit(-1) # Exit with a smile anyway 'cause no point being "stalled in decommissioning"
end
