require 'rubygems'
require 'rest_connection'
require 'yaml'
require 'fileutils'

def cached_deployments()
  if File.exists?("deployments.cache.yaml")
    puts "Loading deployments from cache.."
    deployments = YAML::load(IO.read("deployments.cache.yaml"))
  else
    deployments = Deployment.find_by(:nickname) { |nick| nick.include?(ENV['DEPLOYMENTS_TAG']) }
    File.open("deployments.cache.yaml", "w") {|f| f.write(deployments.to_yaml)}
  end
  deployments
end

desc "Parallel MySQL Chef Alpha test"
task :run_mysql_chef_alpha do
  set = cached_deployments 
  if ENV["FEATURE"]
    feature_name = ENV["FEATURE"]
  else
    feature_name = "mysql_chef_premium_from_scratch.feature" 
  end
  raise "FATAL: please setup DEPLOYMENTS_TAG environment variable, for finding your set of deployments" unless ENV['DEPLOYMENTS_TAG']
  FileUtils.mkdir_p("log")
    raise "FATAL: 4 deployments required for this test" unless set.size >= 4
  platforms = [" Ubuntu"," CentOS"]
  archs = [ "i386", "x86_64" ]
  children = []
  dep_index = 0
  platforms.each do |p|
    archs.each do |a|
      ENV['DEPLOYMENT'] = set[dep_index].nickname
      ENV['SERVER_TAG'] = "#{a}#{p}"
      ENV['REST_CONNECTION_LOG'] = "log/rest_connection.#{ENV['SERVER_TAG']}.log"
      children << Process.fork {
        cmd = "cucumber #{feature_name} --out 'log/mysqlchef.#{ENV['SERVER_TAG']}.log'"
        puts "RUNNING: #{cmd}"
        system(cmd)
      }
      dep_index += 1
    end
  end

  Signal.trap("SIGINT") do
    puts "Caught CTRL-C, killing children.."
    children.each {|c| Process.kill("INT", c)}
    sleep 1
    children.each {|c| Process.kill("INT", c)}
  end

  children.each {|c| Process.wait2(c)}
  puts "Run finished"
  
end

desc "TERMINATE all servers in all deployments specified by DEPLOYMENTS_TAG"
task :kill_all do
  raise "FATAL: please setup DEPLOYMENTS_TAG environment variable, for finding your set of deployments" unless ENV['DEPLOYMENTS_TAG']
  set = cached_deployments 
  set.each {|n| STDOUT.puts n.nickname}
  STDOUT.puts "10 seconds till ..TERMINATING all servers in these deployments ^^^^. CTRL-C to abort."
  sleep 10
  set.each do |deploy|
    servers = deploy.servers
    servers.each { |s| s.stop }
  end
end

desc "RELAUNCH all *running servers in deployments specified by DEPLOYMENTS_TAG"
task :relaunch_all do
  raise "FATAL: please setup DEPLOYMENTS_TAG environment variable, for finding your set of deployments" unless ENV['DEPLOYMENTS_TAG']
  set = cached_deployments 
  set.each {|n| STDOUT.puts n.nickname}
  STDOUT.puts "10 seconds till ..RELAUNCHING all servers in these deployments ^^^^. CTRL-C to abort."
  sleep 10
  set.each do |deploy|
    my_servers = deploy.servers
    my_servers.each do |s| 
      s.relaunch
    end
  end
end

